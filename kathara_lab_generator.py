import os
import sys
import shutil
from collections import defaultdict


def number_to_letter(number):
    """Convertit un nombre en lettre (1 -> A, 2 -> B, etc.)."""
    return chr(ord("A") + int(number) - 1)


def parse_network_file(file_path):
    """Parse le fichier réseau et extrait les équipements et routes."""
    device_list = []

    with open(file_path, "r", encoding="utf-8") as f:
        next(f)  # Skip header

        for line in f:
            line = line.strip()
            if not line:
                continue

            parts = line.split(";")
            if parts[0] == "station" or parts[0].startswith("router"):
                device = {
                    "type": parts[0],
                    "ethernet": parts[5],
                    "address": parts[1],
                    "mask": parts[2],
                    "network": parts[4],
                    "routes": [],
                }
                device_list.append(device)

            elif parts[0] == "routing table":
                route = {
                    "destination": parts[1],
                    "mask": parts[2],
                    "gateway": parts[3],
                }
                device["routes"].append(route)

    return parse_device(device_list)


def parse_device(device_list):
    """Regroupe les équipements de même type dans une liste."""
    device_dict = {"station": [], "router": defaultdict(list)}
    for device in device_list:
        device_type = device["type"]

        if device_type.startswith("station"):
            device_dict["station"].append(device)
        elif device_type.startswith("router"):
            device_dict["router"][device_type].append(device)
    return {"station": device_dict["station"], "router": dict(device_dict["router"])}


def generate_lab(output_dir, device_list):
    """Génère le fichier lab.conf pour Kathará."""
    pc_id = 1
    r_id = 1    
    lab_conf_path = os.path.join(output_dir, "lab.conf")

    with open(lab_conf_path, "w", encoding="utf-8") as f:
        header = 'LAB_DESCRIPTION="This lab has been automatically generated by kathara_lab_generator.py"\n\n'
        f.write(header)

        # Génération des stations
        for device in device_list["station"]:
            name = f"pc{pc_id}"
            f.write(f'{name}[0]="{number_to_letter(device["network"])}"\n')
            f.write(f'{name}[image]="kathara/base"\n\n')
            generate_station_startup_file(output_dir, name, device)
            pc_id += 1

        # Génération des routeurs
        for routers in device_list["router"].items():
            interface_id = 0
            name = f"r{r_id}"
            for device in routers[1]:
                f.write(f'{name}[{interface_id}]="{number_to_letter(device["network"])}"\n')
                interface_id += 1
            f.write(f'{name}[image]="kathara/base"\n\n')
            generate_router_startup_file(output_dir, name, routers[1])
            r_id += 1


def generate_station_startup_file(output_dir, name, device):
    """Génère le fichier de démarrage pour une station."""
    startup_path = os.path.join(output_dir, f"{name}.startup")
    with open(startup_path, "w", encoding="utf-8") as f:
        if device["ethernet"] == "":
            print(f"    WARNING : L'adresse ethernet de la station {name} est vide.")
            print("    L'adresse MAC sera générée aléatoirement par Kathará mais ne sera pas persistante.")
        else:
            f.write(f"ip link set dev eth0 address {device['ethernet']}\n")
        f.write(f"ip address add {device['address']}/{device['mask']} dev eth0\n")

        for route in device["routes"]:
            if route["gateway"] == "":
                f.write(f"ip route add {route['destination']}/{route['mask']} dev eth0\n")
            else:
                f.write(f"ip route add {route['destination']}/{route['mask']} via {route['gateway']} dev eth0\n")


def generate_router_startup_file(output_dir, name, devices):
    """Génère le fichier de démarrage pour un routeur."""
    startup_path = os.path.join(output_dir, f"{name}.startup")
    with open(startup_path, "w", encoding="utf-8") as f:
        interface_id = 0
        for device in devices:
            f.write(f"ip link set dev eth{interface_id} address {device['ethernet']}\n")
            interface_id += 1

        f.write("\n")

        interface_id = 0
        for device in devices:
            f.write(f"ip address add {device['address']}/{device['mask']} dev eth{interface_id}\n")
            interface_id += 1

        f.write("\n")

        interface_id = 0
        for device in devices:
            for route in device["routes"]:
                if route["gateway"] == "":
                    f.write(f"ip route add {route['destination']}/{route['mask']} dev eth{interface_id}\n")
                else:
                    f.write(f"ip route add {route['destination']}/{route['mask']} via {route['gateway']} dev eth{interface_id}\n")
            interface_id += 1


def flush_and_init_folder(output_dir):
    """Efface le contenu du dossier de sortie et le recrée."""
    if os.path.exists(output_dir):
        print(f"Deleting {output_dir}...")
        try:
            shutil.rmtree(output_dir)
            print(f"{output_dir} deleted.")
        except PermissionError:
            print(f"Permission denied to delete {output_dir}.")
            sys.exit(1)
        except Exception as e:
            print(f"Error while deleting {output_dir}: {e}")
            sys.exit(1)
    os.makedirs(output_dir)


def main():
    """Fonction principale."""
    if len(sys.argv) != 3:
        print("Missing arguments.")
        print(f"Usage: {sys.argv[0]} <network_file> <output_path>")
        sys.exit(1)

    if not os.path.isfile(sys.argv[1]):
        print(f"File '{sys.argv[1]}' not found.")
        sys.exit(1)
   
    # Récupération des arguments
    file_path = sys.argv[1]
    output_dir = os.path.join(sys.argv[2], "kathara_lab")

    # Création du dossier de sortie
    flush_and_init_folder(output_dir)

    # Lecture et parsing du fichier réseau
    device_list = parse_network_file(file_path)

    # Génération des fichiers de configuration
    generate_lab(output_dir, device_list)

    print(f"Lab generated in {output_dir}.")


if __name__ == "__main__":
    main()
